#this code was extracted and modified from secondary source. source link https://github.com/carlos-alberto-silva/rGEDI 


# Reading GEDI data
#The CRAN version:
install.packages("rGEDI")
install.packages("devtools")

#rGEDI is not available in this version, so we need to install it from remote like github
install.packages(remote)
remotes::install_github("carlos-alberto-silva/rGEDI")


#The development version:
library(devtools)
devtools::install_git("https://github.com/carlos-alberto-silva/rGEDI", dependencies = TRUE)

# loading rGEDI package
library(rGEDI)

# Study area boundary box coordinates
ul_lat<- 43.086102
lr_lat<- 42.984366
ul_lon<- -76.203578
lr_lon<- -76.074084

# Specifying the date range
daterange=c("2019-07-01","2025-01-21")

# Get path to GEDI data
#gLevel1B<-gedifinder(product="GEDI01_B",ul_lat, ul_lon, lr_lat, lr_lon,version="002",daterange=daterange)
gLevel2A<-gedifinder(product="GEDI02_A",ul_lat, ul_lon, lr_lat, lr_lon,version="002",daterange=daterange)
#gLevel2B<-gedifinder(product="GEDI02_B",ul_lat, ul_lon, lr_lat, lr_lon,version="002",daterange=daterange)

# Set output dir for downloading the files
outdir=getwd()

# Downloading GEDI data
gediDownload(filepath=gLevel2A,outdir="F:/RA Work Spring 2025/R_GEDI/GEDI_Data")


#######
# Herein, we are using only a GEDI sample dataset for this tutorial.
#######
# downloading zip file
outdir <- "F:/RA Work Spring 2025/R_GEDI"  # Replace with your actual directory path
download.file("https://github.com/carlos-alberto-silva/rGEDI/releases/download/datasets/examples.zip",destfile=file.path(outdir, "examples.zip"))

# unzip file 
unzip(file.path(outdir,"examples.zip")) #didn't work actually

################################################GEDI to trajectory points (multiple files at a time)#############################################

library(sf)
library(data.table)

# Define the output directory
outdir <- "F:/RA Work Spring 2025/R_GEDI/GEDI to point"


# List all the .h5 files in the directory
h5_files <- list.files(path = "F:/RA Work Spring 2025/R_GEDI/GEDI_Data", pattern = "\\.h5$", full.names = TRUE)

# Loop through each .h5 file in the directory
for (file_path in h5_files) {
  
  # Read the GEDI data for each file
  gedilevel2a <- readLevel2A(level2Apath = file_path)
  
  # Get GEDI Elevation and Height Metrics
  level2AM <- getLevel2AM(gedilevel2a)
  
  # Convert shot_number to character
  level2AM$shot_number <- as.character(level2AM$shot_number)
  
  # Convert Elevation and Height Metrics to sf (spatial data)
  level2AM_spdf <- sf::st_as_sf(
    level2AM,
    coords = c("lon_lowestmode", "lat_lowestmode"),
    crs = "epsg:4326"
  )
  
  # Create a file name for the shapefile based on the original .h5 file name
  shapefile_name <- gsub("\\.h5$", ".shp", basename(file_path))

  # Export the data as an ESRI shapefile
 # outdir <- "F:\RA Work Spring 2025\R_GEDI\GEDI_Data\Sample\Data"
 # sf::write_sf(level2AM_spdf, file.path(outdir="F:/RA Work Spring 2025/R_GEDI/GEDI_Data/Sample/Shapefile", shapefile_name))

# Export the data as a GeoPackage instead of a Shapefile
gpkg_file <- file.path(outdir="F:/RA Work Spring 2025/R_GEDI/GEDI to point", gsub("\\.h5$", ".gpkg", basename(file_path)))
sf::write_sf(level2AM_spdf, gpkg_file)
}

################################################Clipping for study region and merging#############################################
library(sf)

# Define the directory where your GeoPackages (or shapefiles) are stored
input_dir <- "F:/RA Work Spring 2025/R_GEDI/GEDI to point"

# Define the clipping polygon (it could be a shapefile or GeoPackage)
clip_polygon <- st_read("F:/RA Work Spring 2025/Syracuse_City_Boundary/Syracuse_City_Boundary.shp")

# Transform the city boundary to EPSG:4326 (WGS 84)
city_boundary_transformed <- st_transform(clip_polygon, crs = 4326)

# List all GeoPackage files
gpkg_files <- list.files(path = input_dir, pattern = "\\.gpkg$", full.names = TRUE)

# Initialize an empty list to store the clipped data
clipped_list <- list()

# Loop through each GeoPackage file
for (file_path in gpkg_files) {
  
  # Read the shapefile (GeoPackage layer)
  gdf <- st_read(file_path)
  
  # Clip the shapefile using the clipping polygon
  clipped_data <- st_intersection(gdf, city_boundary_transformed)
  
  # Append the clipped data to the list
  clipped_list[[length(clipped_list) + 1]] <- clipped_data
}

# Merge all the clipped data into one single GeoPackage
merged_data <- do.call(rbind, clipped_list)

# Export the merged data as a new GeoPackage (or shapefile)
#output_path <- "path/to/output/merged_clipped_data.gpkg"
#st_write(merged_data, output_path)

# Alternatively, to save as shapefile:
output_shapefile <- "F:/RA Work Spring 2025/R_GEDI/GEDI_Point_Syracuse/Syracuse area.shp"
st_write(merged_data, output_shapefile)

